<?php
/**
 * Generate PHP from the database using child classes.
 *
 * @author Mike Rodarte
 * @version 1.01
 */
namespace mtsapps;

use \mtsapps\Helpers;
use \mtsapps\Log;

/**
 * Class Generator
 *
 * @package mtsapps
 */
abstract class Generator extends Db
{
    /**
     * @var string Directory for generated file
     */
    protected $directory = '';

    /**
     * @var string Name of generated file
     */
    protected $file_name = '';

    /**
     * @var string Directory and file name of generated file
     */
    protected $file_path = '';

    /**
     * @var DbIterator Database iterator
     */
    protected $iterator = null;

    /**
     * @var string PHP string to write
     */
    protected $php = '';


    /**
     * Generator constructor.
     *
     * @param array $params
     * @uses Generator::$file_path
     */
    public function __construct(array $params)
    {
        parent::__construct($params);

        // generated file must be outside of the namespace
        $this->directory = PHP_DIR;

        if (Helpers::is_array_ne($params)) {
            if (array_key_exists('file_name', $params)) {
                $this->setFileName($params['file_name']);
            }
        }

        $this->file_path = $this->directory . DIRECTORY_SEPARATOR . $this->file_name;
        $this->Log->write('file_path', Log::LOG_LEVEL_USER, $this->file_path);
    }


    /**
     * Call the necessary methods to build the contents and write the file.
     *
     * @return mixed
     */
    abstract protected function build();


    /**
     * Set the top content of the PHP file
     *
     * @param string $class
     * @return bool|int
     */
    protected function buildTopContent($class = '')
    {
        $this->Log->write(__METHOD__, Log::LOG_LEVEL_SYSTEM_INFORMATION);

        // input validation
        if (!Helpers::is_string_ne($class)) {
            $class = __CLASS__;
            $this->Log->write('no class provided, using this class', Log::LOG_LEVEL_WARNING, $class);
        }

        // build file contents
        $contents = '<?php' . PHP_EOL;
        $contents .= '/**' . PHP_EOL;
        $contents .= ' * This file is automatically generated by ' . $class . '::build().' . PHP_EOL;
        $contents .= ' * DO NOT EDIT THIS FILE DIRECTLY' . PHP_EOL;
        $contents .= ' *' . PHP_EOL;
        $contents .= ' * @author Mike Rodarte' . PHP_EOL;
        $contents .= ' */' . PHP_EOL . PHP_EOL;

        // write contents to file, overwriting whatever is in the file
        return file_put_contents($this->file_path, $contents);
    }


    /**
     * Generate the values that need to be written.
     *
     * @return mixed
     */
    abstract protected function generate();


    /**
     * Get the query to pull the data.
     *
     * @return mixed
     */
    abstract protected function getQuery();


    /**
     * Set file name if it is a valid file name
     *
     * @param string $file
     * @return bool
     * @uses Helpers::space_to_underscore()
     */
    protected function setFileName($file = '')
    {
        $this->Log->write(__METHOD__, Log::LOG_LEVEL_SYSTEM_INFORMATION);

        // input validation
        if (!Helpers::is_string_ne($file)) {
            $this->Log->write('file is not valid', Log::LOG_LEVEL_WARNING);

            return false;
        }

        $ext = substr($file, -3);
        if (strtolower($ext) !== 'php') {
            $this->Log->write('extension is not php, but is ' . $ext, Log::LOG_LEVEL_WARNING);

            return false;
        }

        $this->Log->write('setting file name after changing spaces to _ and making it lower case', Log::LOG_LEVEL_USER);
        $this->file_name = strtolower(Helpers::space_to_underscore($file));

        return true;
    }


    /**
     * Execute query and set the iterator.
     *
     * @param string $sql
     * @param array $params
     * @return bool
     */
    protected function setIterator($sql = '', $params = array())
    {
        $this->Log->write(__METHOD__, Log::LOG_LEVEL_SYSTEM_INFORMATION);

        // input validation
        if (!Helpers::is_string_ne($sql)) {
            $this->Log->write('invalid SQL provided', Log::LOG_LEVEL_WARNING, $sql);

            return false;
        }

        $this->iterator = $this->query($sql, $params, 'iterator');

        return $this->iterator instanceof DbIterator;
    }


    /**
     * Append the PHP string content to a file.
     *
     * @return bool|int
     */
    protected function write()
    {
        $this->Log->write(__METHOD__, Log::LOG_LEVEL_SYSTEM_INFORMATION);

        // input validation
        if (!Helpers::is_string_ne($this->php)) {
            $this->Log->write('php is not a string', Log::LOG_LEVEL_WARNING);

            return false;
        }

        // write contents to file
        $bytes = file_put_contents($this->file_path, $this->php . PHP_EOL, FILE_APPEND);

        if ($bytes === false) {
            $this->Log->write('error writing contents to file', Log::LOG_LEVEL_WARNING);
        } else {
            $this->Log->write('file wrote ' . $bytes . ' bytes', Log::LOG_LEVEL_USER);
            $this->php = '';
        }

        return $bytes;
    }

}